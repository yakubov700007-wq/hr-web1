#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–°—Ç–∞–Ω—Ü–∏–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import sys
import os
import sqlite3
import csv
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from streamlit_app import init_db, add_station, station_exists

def import_stations_from_csv(csv_file_path, region_mapping=None):
    """
    –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞.
    
    Args:
        csv_file_path: –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        region_mapping: —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    """
    init_db()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    
    imported = 0
    skipped = 0
    
    print(f"–ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ {csv_file_path}")
    
    with open(csv_file_path, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for row in reader:
            name = row.get('name', '').strip()
            location = row.get('location', '').strip()
            station_type = row.get('type', '–ë–∞–∑–æ–≤–∞—è').strip()
            frequency = row.get('frequency', '').strip()
            power = row.get('power', '').strip()
            status = row.get('status', '–ê–∫—Ç–∏–≤–Ω–∞').strip()
            contact = row.get('contact', '').strip()
            notes = row.get('notes', '').strip()
            region = row.get('region', '').strip()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not region and region_mapping:
                for location_key, mapped_region in region_mapping.items():
                    if location_key.lower() in location.lower():
                        region = mapped_region
                        break
            
            # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—Ç–∞–≤–∏–º –†–†–ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not region:
                region = "–†–†–ü"
            
            if not name:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {row}")
                skipped += 1
                continue
                
            if station_exists(name):
                print(f"–°—Ç–∞–Ω—Ü–∏—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                skipped += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_station((
                name, location, station_type, frequency, power, status, 
                contact, notes, region, "", ""  # PDF –∏ —Ñ–æ—Ç–æ –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ
            ))
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: {name} ({location}) - {region}")
            imported += 1
    
    print(f"\nüìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {imported} —Å—Ç–∞–Ω—Ü–∏–π")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped} —Å—Ç–∞–Ω—Ü–∏–π")
    return imported, skipped

def import_stations_from_text(text_data, default_region="–†–†–ü"):
    """
    –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = "–Ω–∞–∑–≤–∞–Ω–∏–µ|–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ|—Ç–∏–ø|—á–∞—Å—Ç–æ—Ç–∞|–º–æ—â–Ω–æ—Å—Ç—å|—Å—Ç–∞—Ç—É—Å|—Ä–µ–≥–∏–æ–Ω"
    –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π.
    """
    init_db()
    
    imported = 0
    skipped = 0
    
    lines = text_data.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
        parts = line.split('|')
        
        if len(parts) == 1:
            # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
            name = parts[0].strip()
            location = ""
            station_type = "–ë–∞–∑–æ–≤–∞—è"
            frequency = ""
            power = ""
            status = "–ê–∫—Ç–∏–≤–Ω–∞"
            contact = ""
            notes = ""
            region = default_region
        else:
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            name = parts[0].strip() if len(parts) > 0 else ""
            location = parts[1].strip() if len(parts) > 1 else ""
            station_type = parts[2].strip() if len(parts) > 2 else "–ë–∞–∑–æ–≤–∞—è"
            frequency = parts[3].strip() if len(parts) > 3 else ""
            power = parts[4].strip() if len(parts) > 4 else ""
            status = parts[5].strip() if len(parts) > 5 else "–ê–∫—Ç–∏–≤–Ω–∞"
            region = parts[6].strip() if len(parts) > 6 else default_region
            contact = parts[7].strip() if len(parts) > 7 else ""
            notes = parts[8].strip() if len(parts) > 8 else ""
        
        if not name:
            continue
            
        if station_exists(name):
            print(f"–°—Ç–∞–Ω—Ü–∏—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            skipped += 1
            continue
        
        add_station((
            name, location, station_type, frequency, power, status,
            contact, notes, region, "", ""
        ))
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: {name} ({location}) - {region}")
        imported += 1
    
    print(f"\nüìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {imported} —Å—Ç–∞–Ω—Ü–∏–π")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped} —Å—Ç–∞–Ω—Ü–∏–π")
    return imported, skipped

def create_sample_csv():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    sample_csv = """name,location,type,frequency,power,status,contact,notes,region
–°—Ç–∞–Ω—Ü–∏—è-1,–¢–∞—à–∫–µ–Ω—Ç —Ü–µ–Ω—Ç—Ä,–ë–∞–∑–æ–≤–∞—è,145.500,50W,–ê–∫—Ç–∏–≤–Ω–∞,+998901234567,–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è,–†–†–ü
–†–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä-–ê1,–ß–∏—Ä—á–∏–∫,–†–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä,145.600,25W,–ê–∫—Ç–∏–≤–Ω–∞,+998901234568,,–í–ú–ö–ë
–ú–æ–±–∏–ª—å–Ω–∞—è-–ú1,–ü–∞—Ç—Ä—É–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞,–ú–æ–±–∏–ª—å–Ω–∞—è,145.700,5W,–ê–∫—Ç–∏–≤–Ω–∞,+998901234569,–ù–∞ –ø–∞—Ç—Ä—É–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ,–†–£–•–û"""
    
    with open('sample_stations.csv', 'w', encoding='utf-8') as f:
        f.write(sample_csv)
    
    print("üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ 'sample_stations.csv'")
    print("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python import_stations.py sample_stations.csv")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python import_stations.py <csv_file>     # –ò–º–ø–æ—Ä—Ç –∏–∑ CSV")
        print("  python import_stations.py --sample       # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä CSV")
        print("  python import_stations.py --text         # –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π)")
        sys.exit(1)
    
    if sys.argv[1] == "--sample":
        create_sample_csv()
    elif sys.argv[1] == "--text":
        print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        print("–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ|–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ|—Ç–∏–ø|—á–∞—Å—Ç–æ—Ç–∞|–º–æ—â–Ω–æ—Å—Ç—å|—Å—Ç–∞—Ç—É—Å|—Ä–µ–≥–∏–æ–Ω")
        print("–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞–Ω—Ü–∏–∏")
        
        lines = []
        while True:
            line = input("> ").strip()
            if not line:
                break
            lines.append(line)
        
        if lines:
            text_data = '\n'.join(lines)
            import_stations_from_text(text_data)
    else:
        csv_file = sys.argv[1]
        if not os.path.exists(csv_file):
            print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        region_mapping = {
            '—Ç–∞—à–∫–µ–Ω—Ç': '–†–†–ü',
            '—á–∏—Ä—á–∏–∫': '–í–ú–ö–ë', 
            '–∞–Ω–≥—Ä–µ–Ω': '–†–£–•–û',
            '–∞–ª–º–∞–ª—ã–∫': '–†–£–°–û',
            '–¥—É—à–∞–Ω–±–µ': '–î—É—à–∞–Ω–±–µ',
        }
        
        import_stations_from_csv(csv_file, region_mapping)